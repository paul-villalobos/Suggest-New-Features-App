@page "/Create"
@attribute [Authorize]
@using SuggestionAppUI.Models
@inject AuthenticationStateProvider authProvider
@inject ICategoryData categoryData
@inject ISuggestionData suggestionData
@inject IUserData userData
@inject NavigationManager navManager

<h1>Make a Suggestion</h1>

<div>
	<div>
		<div>
			<button @onclick="ClosePage"></button>
		</div>
		@if(categories is not null)
		{
			
		}
		<EditForm Model="suggestion" OnValidSubmit="CreateSuggestion">
			<DataAnnotationsValidator />
			<ValidationSummary />
			<div>
				<label for="suggestion-text">Suggestion</label>
				<div>Focus on the topic or technology you want to learn about.</div>
				<InputText id="suggestion-text" @bind-Value="suggestion.Suggestion"></InputText>
			</div>
			<div>
				<label for="category">Category</label>
				<div>Choose one category.</div>
				<div>
					<SuggestionAppUI.Components.MyInputRadioGroup id="category" @bind-Value="suggestion.CategoryId">
						@foreach (var c in categories)
						{
							<div>
								<InputRadio Value="@c.Id" id="@c.Id" />
								<label for="@c.Id">@c.CategoryName - @c.CategoryDescription</label>
							</div>
						}
					</SuggestionAppUI.Components.MyInputRadioGroup>
				</div>
			</div>
			<div>
				<label for="description">Description</label>
				<div>Briefly describe your suggestion.</div>
				<InputTextArea id="description" @bind-Value="suggestion.Description"></InputTextArea>
			</div>
			<div>
				<button type="submit">Suggest</button>
			</div>
		</EditForm>
	</div>
</div>

@code {
	private CreateSuggestionModel suggestion = new();
	private List<CategoryModel> categories;
	private UserModel loggedInUser;

	protected override async Task OnInitializedAsync()
	{
		categories = await categoryData.GetAllCategories();
		
		//var authState = await authProvider.GetAuthenticationStateAsync();
		//string objectId= authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
		//loggedInUser = await userData.GetUserFromAuthenticationAsync(objectId);
	    loggedInUser = await authProvider.GetUserFromAuth(userData);
	}

	private void ClosePage()
	{
		navManager.NavigateTo("/");
	}

	private async Task CreateSuggestion()
	{
		SuggestionModel s = new();
		s.Suggestion = suggestion.Suggestion;
		s.Description = suggestion.Description;
		s.Author = new BasicUserModel(loggedInUser);
		s.Category = categories.Where(c => c.Id == suggestion.CategoryId).FirstOrDefault();

		if (s.Category is null)
		{
			suggestion.CategoryId = "";
			return;
		}

		await suggestionData.CreateSuggestion(s);
		suggestion = new();
		ClosePage();
	}

}